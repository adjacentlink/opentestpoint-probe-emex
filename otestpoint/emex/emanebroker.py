#
# Copyright (c) 2023 - Adjacent Link LLC, Bridgewater,
# New Jersey
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#
#  * Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#  * Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in
#    the documentation and/or other materials provided with the
#    distribution.
#  * Neither the name of Adjacent Link LLC nor the names of its
#    contributors may be used to endorse or promote products derived
#    from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
# FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
# COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
# BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
# ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#

import socket
import struct
import sys

import emane.shell.remotecontrolportapi_pb2 as remotecontrolportapi_pb2
from otestpoint.interface import ProbeException
from otestpoint.interface.measurementtable_pb2 import MeasurementTable
import otestpoint.toolkit.logger as Logger


def loadEmaneMeasurement(m,value,atype):
    if atype == remotecontrolportapi_pb2.Any.TYPE_ANY_INT8:
        m.type = MeasurementTable.Measurement.TYPE_SINTEGER
        m.iValue = value
    elif atype == remotecontrolportapi_pb2.Any.TYPE_ANY_UINT8:
        m.type = MeasurementTable.Measurement.TYPE_UINTEGER
        m.uValue = value
    elif atype == remotecontrolportapi_pb2.Any.TYPE_ANY_INT16:
        m.type = MeasurementTable.Measurement.TYPE_SINTEGER
        m.iValue = value
    elif atype == remotecontrolportapi_pb2.Any.TYPE_ANY_UINT16:
        m.type = MeasurementTable.Measurement.TYPE_UINTEGER
        m.uValue = value
    elif atype == remotecontrolportapi_pb2.Any.TYPE_ANY_INT32:
        m.type = MeasurementTable.Measurement.TYPE_SINTEGER
        m.iValue = value
    elif atype == remotecontrolportapi_pb2.Any.TYPE_ANY_UINT32:
        m.type = MeasurementTable.Measurement.TYPE_UINTEGER
        m.uValue = value
    elif atype == remotecontrolportapi_pb2.Any.TYPE_ANY_INT64:
        m.type = MeasurementTable.Measurement.TYPE_SINTEGER
        m.iValue = value
    elif atype == remotecontrolportapi_pb2.Any.TYPE_ANY_UINT64:
        m.type = MeasurementTable.Measurement.TYPE_UINTEGER
        m.uValue = value
    elif atype == remotecontrolportapi_pb2.Any.TYPE_ANY_FLOAT:
        m.type = MeasurementTable.Measurement.TYPE_DOUBLE
        m.dValue = value
    elif atype == remotecontrolportapi_pb2.Any.TYPE_ANY_DOUBLE:
        m.type = MeasurementTable.Measurement.TYPE_DOUBLE
        m.dValue = value
    elif atype == remotecontrolportapi_pb2.Any.TYPE_ANY_STRING:
        m.type = MeasurementTable.Measurement.TYPE_STRING
        m.sValue = value
    elif atype == remotecontrolportapi_pb2.Any.TYPE_ANY_BOOLEAN:
        m.type = MeasurementTable.Measurement.TYPE_UINTEGER
        m.uValue = value
    elif atype == remotecontrolportapi_pb2.Any.TYPE_ANY_INETADDR:
        m.type = MeasurementTable.Measurement.TYPE_STRING
        m.sValue = value


def fromAny(any):
    if any.type == remotecontrolportapi_pb2.Any.TYPE_ANY_INT8:
        return (any.i32Value,any.type)
    elif any.type == remotecontrolportapi_pb2.Any.TYPE_ANY_UINT8:
        return (any.u32Value,any.type)
    elif any.type == remotecontrolportapi_pb2.Any.TYPE_ANY_INT16:
        return (any.i32Value,any.type)
    elif any.type == remotecontrolportapi_pb2.Any.TYPE_ANY_UINT16:
        return (any.u32Value,any.type)
    elif any.type == remotecontrolportapi_pb2.Any.TYPE_ANY_INT32:
        return (any.i32Value,any.type)
    elif any.type == remotecontrolportapi_pb2.Any.TYPE_ANY_UINT32:
        return (any.u32Value,any.type)
    elif any.type == remotecontrolportapi_pb2.Any.TYPE_ANY_INT64:
        return (any.i64Value,any.type)
    elif any.type == remotecontrolportapi_pb2.Any.TYPE_ANY_UINT64:
        return (any.u64Value,any.type)
    elif any.type == remotecontrolportapi_pb2.Any.TYPE_ANY_FLOAT:
        return (any.fValue,any.type)
    elif any.type == remotecontrolportapi_pb2.Any.TYPE_ANY_DOUBLE:
        return (any.dValue,any.type)
    elif any.type == remotecontrolportapi_pb2.Any.TYPE_ANY_STRING:
        return (any.sValue,any.type)
    elif any.type == remotecontrolportapi_pb2.Any.TYPE_ANY_BOOLEAN:
        return (any.bValue,any.type)
    elif any.type == remotecontrolportapi_pb2.Any.TYPE_ANY_INETADDR:
        return (any.sValue,any.type)



class EmaneBroker:
    def __init__(self, name, nemId, logger):
        self._sock = None
        self._name = name
        self._nemId = nemId
        self._buildId = 0
        self._sequence = 0
        self._logger = logger


    def start(self, address, port):
        self._sock = socket.socket()

        try:
            self._sock.connect((address,port))
        except:
            raise ProbeException("unable to connect to %s:%d" % (address,port))

        self._logger.log(Logger.DEBUG_LEVEL,"/%s control port connected" % self._name)

        request = remotecontrolportapi_pb2.Request()

        request.type = remotecontrolportapi_pb2.Request.TYPE_REQUEST_QUERY

        request.query.type = remotecontrolportapi_pb2.TYPE_QUERY_MANIFEST

        self._logger.log(Logger.DEBUG_LEVEL,"/%s T1" % self._name)
        response = self._transaction(request)
        self._logger.log(Logger.DEBUG_LEVEL,"/%s T2" % self._name)

        self._logger.log(Logger.DEBUG_LEVEL,"/%s control port getting manifest" % (self._name))

        if response.type == remotecontrolportapi_pb2.Response.TYPE_RESPONSE_QUERY:
            if response.query.type == remotecontrolportapi_pb2.TYPE_QUERY_MANIFEST:
                manifest = {}
                for nem in response.query.manifest.nems:
                    self._logger.log(Logger.INFO_LEVEL,f'XXX nem={nem}')
                    if self._nemId != None and self._nemId != nem.id:
                        continue
                    layers = []
                    for component in nem.components:
                        self._logger.log(Logger.INFO_LEVEL,f'XXX component={component}')
                        if component.type == remotecontrolportapi_pb2.Response.Query.Manifest.NEM.Component.TYPE_COMPONENT_MAC:
                            self._buildId = component.buildId
                            break

        if not self._buildId:
            raise ProbeException("unable to determine build id")
        else:
            self._logger.log(Logger.DEBUG_LEVEL,"/%s component build id %d" % (self._name,self._buildId))


    def stop(self):
        self._sock.close()


    def request_stats(self):
        request = remotecontrolportapi_pb2.Request()
        request.type = remotecontrolportapi_pb2.Request.TYPE_REQUEST_QUERY
        request.query.type = remotecontrolportapi_pb2.TYPE_QUERY_STATISTIC
        request.query.statistic.buildId = self._buildId
        self._logger.log(Logger.DEBUG_LEVEL,"/%s probe getting statistics" % self._name)
        response = self._transaction(request)

        stats = {}

        if response.type == remotecontrolportapi_pb2.Response.TYPE_RESPONSE_QUERY:
            if response.query.type == remotecontrolportapi_pb2.TYPE_QUERY_STATISTIC:
                for element in response.query.statistic.elements:
                    stats[element.name] = fromAny(element.value)[0]

        lstats = {}
        for name,entry in list(stats.items()):
            lstats[name.lower()] = entry
        return lstats


    def request_tables(self):
        request = remotecontrolportapi_pb2.Request()
        request.type = remotecontrolportapi_pb2.Request.TYPE_REQUEST_QUERY
        request.query.type = remotecontrolportapi_pb2.TYPE_QUERY_STATISTICTABLE
        request.query.statisticTable.buildId = self._buildId
        self._logger.log(Logger.DEBUG_LEVEL,"/%s probe getting tables" % self._name)
        response = self._transaction(request)

        tables = {}

        if response.type == remotecontrolportapi_pb2.Response.TYPE_RESPONSE_QUERY:
            if response.query.type == remotecontrolportapi_pb2.TYPE_QUERY_STATISTICTABLE:
                for table in response.query.statisticTable.tables:
                    tableData = []
                    for row in table.rows:
                        rowData = []
                        for value in row.values:
                            rowData.append(fromAny(value))
                        tableData.append(tuple(rowData))
                    tables[table.name] = (tuple(table.labels),tuple(tableData))

        ltables = {}
        for name,entry in list(tables.items()):
            ltables[name.lower()] = entry

        return ltables


    def _transaction(self,request):
        # send request
        self._sequence+=1

        request.sequence = self._sequence

        msg = request.SerializeToString()

        self._sock.send(struct.pack("!L%ds" % len(msg),len(msg),msg))

        # wait for response
        buf = bytes() if sys.version_info >= (3,0) else ""
        messageLengthBytes = 0
        running = True
        response = None

        while True:
            if not messageLengthBytes:
                data = self._sock.recv(4-len(buf))

                if not len(data):
                    running = False
                    break

                if buf == None:
                    buf=data
                else:
                    buf+=data

                if(len(buf) == 4):
                    (messageLengthBytes,) = struct.unpack('!I',buf)
                    buf = bytes() if sys.version_info >= (3,0) else ""

            else:
                data = self._sock.recv(messageLengthBytes-len(buf))

                if not len(data):
                    running = False
                    break

                if buf == None:
                    buf=data
                else:
                    buf+=data

                if(len(buf) == messageLengthBytes):
                    response = remotecontrolportapi_pb2.Response()
                    response.ParseFromString(buf)
                    messageLengthBytes = 0
                    buf = bytes() if sys.version_info >= (3,0) else ""
                    break

        return response
