# Copyright (c) 2023 - Adjacent Link LLC, Bridgewater, New Jersey
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#
# * Redistributions of source code must retain the above copyright
#   notice, this list of conditions and the following disclaimer.
# * Redistributions in binary form must reproduce the above copyright
#   notice, this list of conditions and the following disclaimer in
#   the documentation and/or other materials provided with the
#   distribution.
# * Neither the name of Adjacent Link LLC nor the names of its
#   contributors may be used to endorse or promote products derived
#   from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
# FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
# COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
# BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
# ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
# See toplevel COPYING for more information.

import socket

import emane.shell.remotecontrolportapi_pb2 as remotecontrolportapi_pb2
from otestpoint.interface.measurementtable_pb2 import MeasurementTable
from otestpoint.interface import ProbeException
import otestpoint.toolkit.logger as Logger

from otestpoint.emex.probebase import ProbeBase
from otestpoint.emex.monitor_pb2 import Measurement_emex_monitor_tables_radiomodel
from otestpoint.emex.monitor_pb2 import Measurement_emex_monitor_tables_receive
from otestpoint.emex.monitor_pb2 import Measurement_emex_monitor_tables_tdma


class Monitor(ProbeBase):
    def __init__(self):
        ProbeBase.__init__(self,
                           'monitor',
                           'emexmonitor',
                           'otestpoint.emex',
                           'probe-emex-monitor.xsd')

    def build(self,probe):
        self._logger.log(Logger.INFO_LEVEL,f"   build /{probe}")
        c = globals()[probe]
        p = c()
        return p



def fromMeasurement(measurement):
    if measurement.type == MeasurementTable.Measurement.TYPE_SINTEGER:
        return measurement.iValue
    elif measurement.type == MeasurementTable.Measurement.TYPE_UINTEGER:
        return measurement.uValue
    elif measurement.type == MeasurementTable.Measurement.TYPE_DOUBLE:
        return measurement.dValue
    else:
        return measurement.sValue


def default_method_format(self,msg):
    buf = ""

    for item in sorted(msg.DESCRIPTOR.fields_by_name.keys()):
        if item != 'description':
            messageType = type(getattr(msg,item)).__name__

            if messageType == 'MeasurementTable':
                buf += '[] '+ item + "\n"

                table = getattr(msg,item)

                widths = [];

                for label in table.labels:
                    widths.append(len(label))

                for row in table.rows:
                    i = 0
                    for value in row.values:
                        widths[i] = max(widths[i],len(str(fromMeasurement(value))))
                        i+=1

                i = 0
                for label in table.labels:
                    buf += '|' + label.ljust(widths[i])
                    i += 1
                buf += "|\n"

                for row in table.rows:
                    i = 0
                    for value in row.values:
                        val = str(fromMeasurement(value))
                        buf += '|' + val.ljust(widths[i])
                        i += 1
                    buf += "|\n"

                buf += "--\n"

            else:
                counter = getattr(msg,item)
                buf += item + " = " + str(counter) + "\n"

    return buf
