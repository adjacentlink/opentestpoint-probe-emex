#
# Copyright (c) 2023 - Adjacent Link LLC, Bridgewater,
# New Jersey
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#
#  * Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#  * Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in
#    the documentation and/or other materials provided with the
#    distribution.
#  * Neither the name of Adjacent Link LLC nor the names of its
#    contributors may be used to endorse or promote products derived
#    from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
# FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
# COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
# BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
# ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
from copy import copy
from otestpoint.emex.utils import Averager


class Tallies:
    def __init__(self):
        self.reset()

    def zero(self):
        raise NotImplementError('Tallies.zero not implemented')

    def reset(self):
        self._tallies = self.zero()

    @property
    def tallies(self):
        return copy(self._tallies)

    @tallies.setter
    def tallies(self, tallies):
        self._tallies = tallies

    def update(self, tallies):
        return {
            key: self._tallies[key].update(*tallies[key]) for key in self._tallies
        }



class ApiQueueMetricTallies(Tallies):
    def zero(self):
        return {
            'avgprocessapiqueuedepth': Averager(),
            'avgprocessapiqueuewait': Averager(),
            'avgtimedeventlatency': Averager(),
            'avgtimedeventlatencyratio': Averager()
        }


class RfSignalTallies(Tallies):
    def zero(self):
        return {
            'avgrxpower': Averager(),
            'avgnoisefloor': Averager(),
            'avgsinr': Averager(),
            'avginr': Averager()
        }
